[{"role":"system","content":"You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\n\nThink step by step and reason yourself to the right decisions to make sure we get it right.\nYou will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.\n\nThen you will output the content of each file including ALL code.\nEach file must strictly follow a markdown code block format, where the following tokens must be replaced such that\nFILENAME is the lowercase file name including the file extension. There should be nothing but the file name and file extension on the line.\nLANG is the markup code block language for the code's language, and CODE is the code:\n\nFILENAME\n```LANG\nCODE\n```\n\nDo not comment on what every file does\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nPlease note that the code should be fully functional. No placeholders.\n\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that files contain all imports, types etc. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nInclude module dependency or package manager dependency definition file.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nUseful to know:\nYou almost always put different classes in different files.\nFor Golang, you always create an appropriate go.mod file.\nFor Python, you always create an appropriate requirements.txt file.\nFor NodeJS, you always create an appropriate package.json file.\nFor Terraform, you always create an appropriate variables.tf file.\nYou always add a comment briefly describing the purpose of the function definition.\nYou try to add comments explaining very complex bits of logic.\nYou always follow the best practices for the requested languages in terms of describing the code written as a defined\npackage/project.\n\nGo toolbelt preferences:\n- go test\n- go modules\n- DB ORM: gorm\n- Web Framework: gin\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n\nTerraform toolbelt preferences:\n- Azure: use azurerm provider to create azure resources\n- Azure Active Directory: use azuread provider to create users and groups\n- Create a .tfvars file to hold variables values\n- Create a main.tf file for hcl code\n- terratest\n\n\nYour answers shoud follow the language preferences below:\n- English"},{"role":"system","content":"Instructions: hello world console app in c#"},{"role":"user","content":"You are a super smart developer. You have been asked to make a specification for a program.\n\nThink step by step to make sure we get a high quality specification and we don't miss anything.\nFirst, be super explicit about what the program should do, which features it should have\nand give details about anything that might be unclear. **Don't leave anything unclear or undefined.**\n\nSecond, lay out the names of the core classes, functions, methods that will be necessary,\nas well as a quick comment on their purpose.\nFinally list all non-standard dependencies you'll have to use.\n\nThis specification will be used later as the basis for the implementation."},{"role":"assistant","content":"The program is a simple \"Hello, World!\" console application written in C#. \n\nThe main feature of this program is to output the string \"Hello, World!\" on the console.\n\nDetails:\n- This program does not take any input from the user.\n- This program does not have any graphical user interface. It is entirely console-based.\n- This program has only one feature: to print out \"Hello, World!\" whenever it is run.\n\nHere is the list of core classes and their purposes:\n\n1. `Program`: This is the main class of the console application.\n2. `Main()`: This is the entry point method of the console application. It is within this method that the string \"Hello, World!\" is printed to the console.\n\nPotential non-standard dependencies:\nThere are no non-standard dependencies for this application as it uses only the in-built System namespace from the .NET framework.\n\nSpecifications:\n\n1. Write a \"Hello, World!\" program in C#.\n2. The program should be written using the .NET framework.\n3. The program should only use the in-built `System` namespace.\n4. The program should consist of one single file, with the main class `Program` and the method `Main()`.\n5. The method `Main()` should print \"Hello, World!\" to the console.\n6. The program should not take any inputs from the user.\n7. The program should not have any graphical user interface. It should be completely console-based."}]